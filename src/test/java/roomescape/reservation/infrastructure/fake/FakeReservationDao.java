package roomescape.reservation.infrastructure.fake;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import roomescape.reservation.application.dto.CreateReservationRequest;
import roomescape.reservation.application.repository.ReservationRepository;
import roomescape.reservation.domain.Reservation;

public class FakeReservationDao implements ReservationRepository {

    private Long autoGeneratedId = 0L;
    private final Map<Long, Reservation> store = new HashMap<>();

    @Override
    public Reservation insert(CreateReservationRequest request) {
        autoGeneratedId++;
        Reservation reservation = new Reservation(autoGeneratedId,
                request.getMember(),
                request.getTheme(),
                request.getDate(),
                request.getTime()
        );
        store.put(autoGeneratedId, reservation);

        return reservation;
    }

    @Override
    public List<Reservation> findAllReservations() {
        return store.values().stream().toList();
    }

    @Override
    public void delete(Long reservationId) {
        store.remove(reservationId);
    }

    @Override
    public boolean existsByTimeId(Long timeId) {
        return store.values().stream()
                .anyMatch(reservation -> reservation.getReservationTime().getId().equals(timeId));
    }

    @Override
    public boolean existsByDateTime(LocalDateTime reservationDateTime) {
        return store.values().stream()
                .anyMatch(reservation -> {
                    LocalTime time = reservation.getReservationTime().getStartAt();
                    LocalDate date = reservation.getDate().getReservationDate();
                    return LocalDateTime.of(date, time).equals(reservationDateTime);
                });
    }

    @Override
    public boolean existsByThemeId(Long themeId) {
        return store.values().stream()
                .anyMatch(reservation -> reservation.getTheme().getId().equals(themeId));
    }

    @Override
    public boolean existsByDateAndThemeIdAndTimeId(LocalDate date, Long timeId, Long themeId) {
        return store.values().stream()
                .anyMatch(reservation ->
                        reservation.getDate().getReservationDate().equals(date) &&
                                reservation.getReservationTime().getId().equals(timeId) &&
                                reservation.getTheme().getId().equals(themeId));
    }
}
