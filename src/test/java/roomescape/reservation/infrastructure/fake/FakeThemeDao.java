package roomescape.reservation.infrastructure.fake;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import roomescape.reservation.application.repository.ThemeRepository;
import roomescape.reservation.domain.Reservation;
import roomescape.reservation.domain.Theme;
import roomescape.reservation.presentation.dto.ThemeRequest;

public class FakeThemeDao implements ThemeRepository {
    private Long autoGeneratedId = 0L;
    private final Map<Long, Theme> store = new HashMap<>();
    private List<Reservation> reservations;

    @Override
    public Theme insert(ThemeRequest themeRequest) {
        autoGeneratedId++;
        Theme theme = new Theme(autoGeneratedId, themeRequest.getName(), themeRequest.getDescription(),
                themeRequest.getThumbnail());
        store.put(autoGeneratedId, theme);

        return theme;
    }

    @Override
    public List<Theme> findAllThemes() {
        return store.values().stream().toList();
    }

    @Override
    public void delete(Long id) {
        store.remove(id);
    }

    @Override
    public Optional<Theme> findById(Long themeId) {
        return store.values().stream()
                .filter(theme -> theme.getId().equals(themeId))
                .findAny();
    }

    @Override
    public List<Theme> findPopularThemes() {
        Map<Theme, Integer> themeCount = new LinkedHashMap<>();

        List<Reservation> beforeReservations = reservations.stream()
                .filter(this::isInLastWeek)
                .toList();
        for(Reservation reservation : beforeReservations){
            Theme theme = reservation.getTheme();
            themeCount.put(theme, themeCount.getOrDefault(theme, 0)+1);
        }

        return themeCount.keySet().stream()
                .sorted((t1, t2) -> Integer.compare(themeCount.get(t2), themeCount.get(t1)))
                .toList();
    }

    private boolean isInLastWeek(Reservation reservation) {
        return !(reservation.getDate().getReservationDate().isBefore(LocalDate.now().minusDays(7))
                || reservation.getDate().getReservationDate().isAfter(LocalDate.now().minusDays(1)));
    }

    public void setReservations(List<Reservation> reservations){
        this.reservations = reservations;
    }
}
