package roomescape.reservation.infrastructure.fake;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import roomescape.reservation.application.repository.ReservationRepository;
import roomescape.reservation.application.repository.ThemeRepository;
import roomescape.reservation.domain.Theme;
import roomescape.reservation.presentation.dto.ThemeRequest;

public class FakeThemeDao implements ThemeRepository {
    private final ReservationRepository fakeReservationDao; // 예약 정보 참조

    private Long autoGeneratedId = 0L;
    private final Map<Long, Theme> store = new HashMap<>();

    public FakeThemeDao(ReservationRepository fakeReservationDao) {
        this.fakeReservationDao = fakeReservationDao;
    }

    @Override
    public Theme insert(ThemeRequest themeRequest) {
        autoGeneratedId++;
        Theme theme = new Theme(autoGeneratedId, themeRequest.getName(), themeRequest.getDescription(),
                themeRequest.getThumbnail());
        store.put(autoGeneratedId, theme);

        return theme;
    }

    @Override
    public List<Theme> findAllThemes() {
        return store.values().stream().toList();
    }

    @Override
    public int delete(Long themeId) {
        if (!store.containsKey(themeId)) {
            return 0;
        }
        store.remove(themeId);
        return 1;
    }

    @Override
    public Optional<Theme> findById(Long themeId) {
        return store.values().stream()
                .filter(theme -> theme.getId().equals(themeId))
                .findAny();
    }

    @Override
    public List<Theme> findPopularThemes() {
        Map<Long, Long> themeReservationCounts = fakeReservationDao.findAllReservations().stream()
                .collect(Collectors.groupingBy(
                        reservation -> reservation.getTheme().getId(),
                        Collectors.counting()
                ));

        return store.values().stream()
                .sorted((t1, t2) -> {
                    long count1 = themeReservationCounts.getOrDefault(t1.getId(), 0L);
                    long count2 = themeReservationCounts.getOrDefault(t2.getId(), 0L);
                    return Long.compare(count2, count1); // 내림차순
                })
                .toList();
    }
}
