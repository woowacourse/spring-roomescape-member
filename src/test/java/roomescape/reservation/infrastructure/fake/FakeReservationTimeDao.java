package roomescape.reservation.infrastructure.fake;

import java.time.LocalTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import roomescape.reservation.application.repository.ReservationTimeRepository;
import roomescape.reservation.domain.ReservationTime;

public class FakeReservationTimeDao implements ReservationTimeRepository {

    private Long autoGeneratedId = 0L;
    private final Map<Long, ReservationTime> store = new HashMap<>();

    @Override
    public ReservationTime insert(LocalTime time) {
        autoGeneratedId++;
        ReservationTime reservationTime = new ReservationTime(autoGeneratedId, time);
        store.put(autoGeneratedId, reservationTime);

        return reservationTime;
    }

    @Override
    public List<ReservationTime> findAllTimes() {
        return store.values().stream().toList();
    }

    @Override
    public Optional<ReservationTime> findById(Long timeId) {
        return store.values().stream()
                .filter(reservationTime -> reservationTime.getId().equals(timeId))
                .findAny();
    }

    @Override
    public int delete(Long timeId) {
        if(!store.containsKey(timeId)){
            return 0;
        }

        store.remove(timeId);
        return 1;
    }

    @Override
    public boolean isExists(LocalTime startAt) {
        return store.values().stream()
                .anyMatch(reservationTime -> reservationTime.getStartAt().equals(startAt));
    }
}
